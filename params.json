{"name":"Etp","tagline":"Erlang Term Parser","body":"## ETP: An Erlang Term Parser for Java. \r\n\r\nGiven a String of Erlang terms, ETP will parse the string into a tree of ETP Java objects.\r\n\r\n### Usage\r\n\r\n\tEPTTerm com.metadave.etp.ETP.parse(String s)\r\n\r\n\tEPTTerm com.metadave.etp.ETP.parse(InputStream is)\r\n\r\nAn etp term is made up of any of these classes:\r\n\r\n- ETPTerm (abstract)\t\r\n- ETPAtom\r\n- ETPQuotedAtom\r\n- ETPBinary\r\n- ETPBoolean\r\n- ETPDouble\r\n- ETPFun\r\n- ETPInteger\r\n- ETPList\r\n- ETPPid\r\n- ETPRef\r\n- ETPString\r\n- ETPTerm\r\n- ETPTuple\r\n\r\n### Example\r\n\r\n```\r\nETPTuple tuple = (ETPTuple)ETP.parse(\r\n                \"{mylist, [1,2,3,4], \\n\" +\r\n                 \"my_string, \\\"Hello world\\\"}\");\r\nETPAtom atom = (ETPAtom)tuple.getValue().get(0);\r\nSystem.out.println(\"Atom = \" + atom);\r\n\r\nETPList list = (ETPList)tuple.getValue().get(1);\r\n// use getValue() to access the list of terms\r\nfor(ETPTerm v : list.getValue()) {\r\n\tSystem.out.println(\"  List item \" + v);\r\n}\r\nETPAtom my_string_atom = (ETPAtom)tuple.getValue().get(2);\r\nSystem.out.println(my_string_atom);\r\n\r\nETPString s = (ETPString)tuple.getValue().get(3);\r\nSystem.out.println(s.getValue()); // getValue() gets the \"raw\" value\r\nSystem.out.println(s.toString()); // toString() gets the string representation\r\n        \r\n// you can set values on the ETP structure and call toString() to render\r\n// a new Erlang term\r\natom.setValue(\"new_atom_value\");\r\nlist.getValue().add(new ETPInteger(100));\r\nSystem.out.println(tuple.toString());\r\n```\r\n\r\nyields the following output:\r\n\r\n```\r\nAtom = mylist\r\n  List item 1\r\n  List item 2\r\n  List item 3\r\n  List item 4\r\nmy_string\r\nHello world\r\n\"Hello world\"\r\n{new_atom_value,[1,2,3,4,100],my_string,\"Hello world\"}\r\n```\r\n\r\n### Status\r\n\r\n  Etp parses a Riak app.config file without breaking a sweat.\r\n\r\n### Building\r\n\r\nYou'll need Maven to build etp.\r\n\r\n\tmvn package\r\n\r\n\r\n### Rendering\r\n\r\nCall `toString()` on a `ETPTerm` object will render a valid Erlang term to a `String`.\r\n\r\n\r\n### TODO\r\n\r\n\t$\\n\r\n\t2#101\r\n\tSontatype OSS\r\n\tRetain comments + whitespace on a separate Antlr token stream\r\n\tPretty print\r\n\r\n### Contributing\r\n\r\nFork this repo, create a branch with\r\n\r\n\tgit checkout -b your_branch_name\r\n\t\r\nSubmit a pull request when your code is ready for review.\t\r\n### License\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0.html\r\n\r\n---\r\n\r\nÂ© 2013 Dave Parfitt\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}